let tg;
try {
  tg = window.Telegram.WebApp;
  tg.ready();
} catch (error) {
  console.error("Telegram Web App not available. Running in standalone mode.");
  showNotification("–û—à–∏–±–∫–∞: –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram.");
  tg = { initDataUnsafe: { user: null } };
}

let cart = [];
let isAdminAuthenticated = false;
let isAdminUser = false;
let deliveryData = null;
let pendingPurchase = null;
let currentFilters = {
  categories: [],
  sizes: [],
  minPrice: null,
  maxPrice: null,
  conditions: [],
};
const adminUserIds = [570191364];
let products = [];
let reviews = [];
let currentImageIndex = 0;

function checkIfAdminUser() {
  const user = tg.initDataUnsafe.user;
  if (user && adminUserIds.includes(user.id)) {
    isAdminUser = true;
  }
}

function renderBottomNav() {
  const bottomNav = document.getElementById("bottomNav");
  bottomNav.innerHTML = `
    <button onclick="showScreen('catalogScreen')">üìã</button>
    <button onclick="showScreen('cartScreen')">üõí</button>
    <button onclick="showScreen('reviewsScreen')">üí¨</button>
  `;
  if (isAdminUser) {
    const adminButton = document.createElement("button");
    adminButton.innerHTML = "üõ†Ô∏è";
    adminButton.onclick = () => showScreen("adminScreen");
    bottomNav.appendChild(adminButton);
  }
}

function showNotification(message) {
  const notification = document.getElementById("notification");
  if (notification) {
    notification.textContent = message;
    notification.classList.add("show");
    setTimeout(() => {
      notification.classList.remove("show");
    }, 3000);
  } else {
    console.warn("Notification element not found:", message);
  }
}

async function loadData() {
  try {
    const productsResponse = await axios.get(
      "https://shroud.onrender.com/api/products"
    );
    products = productsResponse.data;
    const reviewsResponse = await axios.get(
      "https://shroud.onrender.com/api/reviews"
    );
    reviews = reviewsResponse.data;
    renderCatalog();
    renderReviews();
    if (isAdminAuthenticated) renderAdmin();
  } catch (error) {
    console.error("Error loading data:", error.message);
    showNotification("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.");
  }
}

async function checkAdminPassword() {
  const password = document.getElementById("adminPassword").value;
  const correctPassword = "admin123";
  if (password === correctPassword) {
    isAdminAuthenticated = true;
    document.getElementById("adminLogin").style.display = "none";
    document.getElementById("adminContent").style.display = "block";
    document.getElementById("adminContent4").style.display = "block";
    await loadData();
    showNotification("–î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç!");
  } else {
    showNotification("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!");
  }
}

function renderCatalog(filteredProducts = products) {
  const catalogDiv = document.getElementById("catalog");
  catalogDiv.innerHTML = "";
  filteredProducts.forEach((product) => {
    const productDiv = document.createElement("div");
    productDiv.className = "product";
    const imageUrl = product.images[0] || "https://via.placeholder.com/150";
    const yearDisplay = product.year ? `–ì–æ–¥: ${product.year}<br>` : "";
    const blankDisplay = product.blank ? `–ë–ª–∞–Ω–∫: ${product.blank}<br>` : "";
    productDiv.innerHTML = `
      <div class="product-image-container">
        <img src="${imageUrl}" alt="${product.name}">
      </div>
      <h3>${product.name}</h3>
      <p>${yearDisplay}${blankDisplay}–†–∞–∑–º–µ—Ä: ${
      product.size.length > 0 ? product.size.join("/") : "–ë–µ–∑ —Ä–∞–∑–º–µ—Ä–∞"
    }</p>
      <p>${product.price}‚ÇΩ</p>
      <div class="stars">${renderStars(product.condition)}</div>
    `;
    productDiv.onclick = () => showProductPage(product.id);
    catalogDiv.appendChild(productDiv);
  });
}

function filterProducts() {
  let filteredProducts = products;
  if (currentFilters.categories.length > 0) {
    const mainCategories = ["–§—É—Ç–±–æ–ª–∫–∞", "–õ–æ–Ω–≥—Å–ª–∏–≤", "–•—É–¥–∏"];
    const selectedMainCategories = currentFilters.categories.filter((cat) =>
      mainCategories.includes(cat)
    );
    const includeOther = currentFilters.categories.includes("–î—Ä—É–≥–æ–µ");
    filteredProducts = filteredProducts.filter((product) => {
      if (selectedMainCategories.includes(product.category)) return true;
      if (includeOther && !mainCategories.includes(product.category))
        return true;
      return false;
    });
  }
  if (currentFilters.sizes.length > 0) {
    filteredProducts = filteredProducts.filter((product) =>
      product.size.some((size) => currentFilters.sizes.includes(size))
    );
  }
  if (currentFilters.minPrice !== null) {
    filteredProducts = filteredProducts.filter(
      (product) => product.price >= currentFilters.minPrice
    );
  }
  if (currentFilters.maxPrice !== null) {
    filteredProducts = filteredProducts.filter(
      (product) => product.price <= currentFilters.maxPrice
    );
  }
  if (currentFilters.conditions.length > 0) {
    filteredProducts = filteredProducts.filter((product) =>
      currentFilters.conditions.includes(String(product.condition))
    );
  }
  const searchInput = document.getElementById("searchInput");
  const searchTerm = searchInput ? searchInput.value.toLowerCase() : "";
  if (searchTerm) {
    filteredProducts = filteredProducts.filter((product) =>
      product.name.toLowerCase().includes(searchTerm)
    );
  }
  return filteredProducts;
}

function applyFilters() {
  currentFilters.categories = Array.from(
    document.querySelectorAll('input[name="category"]:checked')
  ).map((cb) => cb.value);
  currentFilters.sizes = Array.from(
    document.querySelectorAll('input[name="size"]:checked')
  ).map((cb) => cb.value);
  const minPrice = document.getElementById("minPrice")?.value;
  const maxPrice = document.getElementById("maxPrice")?.value;
  currentFilters.minPrice = minPrice ? Number(minPrice) : null;
  currentFilters.maxPrice = maxPrice ? Number(maxPrice) : null;
  currentFilters.conditions = Array.from(
    document.querySelectorAll('input[name="condition"]:checked')
  ).map((cb) => cb.value);
  renderCatalog(filterProducts());
  showScreen("catalogScreen");
}

function resetFilters() {
  currentFilters = {
    categories: [],
    sizes: [],
    minPrice: null,
    maxPrice: null,
    conditions: [],
  };
  document
    .querySelectorAll('input[name="category"]')
    .forEach((cb) => (cb.checked = false));
  document
    .querySelectorAll('input[name="size"]')
    .forEach((cb) => (cb.checked = false));
  const minPriceInput = document.getElementById("minPrice");
  const maxPriceInput = document.getElementById("maxPrice");
  if (minPriceInput) minPriceInput.value = "";
  if (maxPriceInput) maxPriceInput.value = "";
  document
    .querySelectorAll('input[name="condition"]')
    .forEach((cb) => (cb.checked = false));
  renderCatalog();
  showScreen("catalogScreen");
}

function showProductPage(productId) {
  const product = products.find((p) => p.id === productId);
  if (!product) return;
  currentImageIndex = 0;
  document.getElementById("productPage").dataset.productId = product.id;
  const sizeOptions =
    product.size.length > 0
      ? `<select id="sizeSelect">${product.size
          .map((size) => `<option value="${size}">${size}</option>`)
          .join("")}</select>`
      : "<p>–ë–µ–∑ —Ä–∞–∑–º–µ—Ä–∞</p>";
  const imageUrl =
    product.images[currentImageIndex] || "https://via.placeholder.com/150";
  const yearDisplay = product.year ? `<p>–ì–æ–¥: ${product.year}</p>` : "";
  const blankDisplay = product.blank ? `<p>–ë–ª–∞–Ω–∫: ${product.blank}</p>` : "";
  const productPageDiv = document.getElementById("productPage");
  productPageDiv.innerHTML = `
    <div class="product-image">
      <img src="${imageUrl}" alt="${product.name}" id="productImage">
      <button class="arrow left" onclick="changeImage(-1)">‚¨Ö</button>
      <button class="arrow right" onclick="changeImage(1)">‚û°</button>
    </div>
    <div class="product-details">
      <h2>${product.name}</h2>
      <p>–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${product.category}</p>
      ${yearDisplay}
      ${blankDisplay}
      <p>–†–∞–∑–º–µ—Ä: ${sizeOptions}</p>
      <p>–¶–µ–Ω–∞: ${product.price}‚ÇΩ</p>
      <button class="add-to-cart-btn" onclick="addToCart(${
        product.id
      })">–î–û–ë–ê–í–ò–¢–¨ –í –ö–û–†–ó–ò–ù–£</button>
      <p>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</p>
      <div class="stars">${renderStars(product.condition)}</div>
    </div>
  `;
  showScreen("productScreen");
}

function changeImage(direction) {
  const productId = document.getElementById("productPage").dataset.productId;
  const product = products.find((p) => p.id === Number(productId));
  if (!product) return;
  currentImageIndex += direction;
  if (currentImageIndex < 0) currentImageIndex = product.images.length - 1;
  if (currentImageIndex >= product.images.length) currentImageIndex = 0;
  document.getElementById("productImage").src =
    product.images[currentImageIndex] || "https://via.placeholder.com/150";
}

function renderStars(condition) {
  return "‚òÖ".repeat(condition) + "‚òÜ".repeat(5 - condition);
}

async function addToCart(productId) {
  const product = products.find((p) => p.id === productId);
  const sizeSelect = document.getElementById("sizeSelect");
  const selectedSize = sizeSelect ? sizeSelect.value : null;
  try {
    const userId = tg.initDataUnsafe.user?.id || 0;
    const response = await axios.post(
      "https://shroud.onrender.com/api/products/reserve",
      {
        productId: product._id,
        size: selectedSize,
        userId,
      }
    );
    if (response.data.message === "Product reserved") {
      cart.push({ ...product, selectedSize });
      renderCart();
      showNotification("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!");
    }
  } catch (error) {
    console.error("Error reserving product:", error.message);
    showNotification("–¢–æ–≤–∞—Ä —É–∂–µ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.");
  }
}

function renderCart() {
  const cartDiv = document.getElementById("cart");
  cartDiv.innerHTML = "";
  if (cart.length === 0) {
    cartDiv.innerHTML = "<p>–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</p>";
    return;
  }
  cart.forEach((item, index) => {
    const cartItemDiv = document.createElement("div");
    cartItemDiv.className = "cart-item";
    cartItemDiv.innerHTML = `
      <img src="${item.images[0]}" alt="${item.name}">
      <div class="cart-item-details">
        <h3>${item.name}</h3>
        <p>–†–∞–∑–º–µ—Ä: ${item.selectedSize || "–ë–µ–∑ —Ä–∞–∑–º–µ—Ä–∞"}</p>
        <p>–¶–µ–Ω–∞: ${item.price}‚ÇΩ</p>
      </div>
      <div class="cart-item-actions">
        <button class="remove-btn" onclick="removeFromCart(${index})">‚úñ</button>
        <button class="buy-btn" onclick="buyItem(${index})">–ö–£–ü–ò–¢–¨</button>
      </div>
    `;
    cartDiv.appendChild(cartItemDiv);
  });
}

function removeFromCart(index) {
  cart.splice(index, 1);
  renderCart();
  showNotification("–¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã!");
}

function buyItem(index) {
  pendingPurchase = [cart[index]];
  showScreen("deliveryScreen");
}

function buyAll() {
  if (cart.length === 0) {
    showNotification("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!");
    return;
  }
  pendingPurchase = [...cart];
  showScreen("deliveryScreen");
}

async function submitDelivery() {
  const name = document.getElementById("deliveryName")?.value;
  const address = document.getElementById("deliveryAddress")?.value;
  const phone = document.getElementById("deliveryPhone")?.value;
  if (!name || !address || !phone) {
    showNotification("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!");
    return;
  }
  deliveryData = { name, address, phone };
  const total = pendingPurchase.reduce((sum, item) => sum + item.price, 0);
  const items = pendingPurchase.map((item) => ({
    name: item.name,
    size: item.selectedSize || "–ë–µ–∑ —Ä–∞–∑–º–µ—Ä–∞",
    price: item.price,
  }));
  if (tg.sendData) {
    tg.sendData(
      JSON.stringify({
        action: "requestPayment",
        total,
        delivery: deliveryData,
        items,
      })
    );
  } else {
    showNotification("–û—à–∏–±–∫–∞: –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ Telegram.");
  }
}

function renderReviews() {
  const reviewsDiv = document.getElementById("reviews");
  reviewsDiv.innerHTML = "";
  reviews.forEach((review) => {
    const reviewDiv = document.createElement("div");
    reviewDiv.className = "review";
    reviewDiv.innerHTML = `
      <h3>${review.username}</h3>
      <p>${review.text}</p>
      ${
        isAdminAuthenticated
          ? `<button class="delete-btn" onclick="deleteReview(${reviews.indexOf(
              review
            )})">‚úñ</button>`
          : ""
      }
    `;
    reviewsDiv.appendChild(reviewDiv);
  });
}

function renderAdmin() {
  if (!isAdminAuthenticated) return;
  const productListDiv = document.getElementById("productList");
  productListDiv.innerHTML = "";
  products.forEach((product, index) => {
    const productItemDiv = document.createElement("div");
    productItemDiv.className = "product-item";
    productItemDiv.innerHTML = `
      <h4>${product.name} (${product.category}) - ${product.price}‚ÇΩ</h4>
      <p>–†–∞–∑–º–µ—Ä: ${
        product.size.length > 0 ? product.size.join("/") : "–ë–µ–∑ —Ä–∞–∑–º–µ—Ä–∞"
      }</p>
      <button class="edit-btn" onclick="editProduct(${index})">‚úèÔ∏è</button>
      <button class="delete-btn" onclick="deleteProduct(${index})">‚úñ</button>
    `;
    productListDiv.appendChild(productItemDiv);
  });
}

async function addProduct() {
  if (!isAdminAuthenticated) return;
  const name = document.getElementById("newProductName")?.value;
  const category = document.getElementById("newProductCategory")?.value;
  const sizesInput = document
    .getElementById("newProductSizes")
    ?.value.split(",")
    .map((s) => s.trim())
    .filter((s) => s);
  const price = Number(document.getElementById("newProductPrice")?.value);
  const year = document.getElementById("newProductYear")?.value;
  const blank = document.getElementById("newProductBlank")?.value;
  const condition = Number(
    document.getElementById("newProductCondition")?.value
  );
  const imageInput = document.getElementById("newProductImage");
  if (
    name &&
    category &&
    !isNaN(price) &&
    !isNaN(condition) &&
    condition >= 1 &&
    condition <= 5
  ) {
    const formData = new FormData();
    formData.append(
      "id",
      products.length > 0 ? Math.max(...products.map((p) => p.id)) + 1 : 1
    );
    formData.append("name", name);
    formData.append("size", sizesInput.join(","));
    formData.append("price", price);
    formData.append("category", category);
    formData.append("condition", condition);
    if (year) formData.append("year", year);
    if (blank) formData.append("blank", blank);
    for (let i = 0; i < imageInput.files.length; i++) {
      formData.append("images", imageInput.files[i]);
    }
    try {
      const response = await axios.post(
        "https://shroud.onrender.com/api/products",
        formData,
        { headers: { "Content-Type": "multipart/form-data" } }
      );
      products.push(response.data);
      await axios.post("https://shroud.onrender.com/notify", response.data);
      showNotification("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!");
      document.getElementById("newProductName").value = "";
      document.getElementById("newProductCategory").value = "";
      document.getElementById("newProductSizes").value = "";
      document.getElementById("newProductPrice").value = "";
      document.getElementById("newProductYear").value = "";
      document.getElementById("newProductBlank").value = "";
      document.getElementById("newProductCondition").value = "";
      imageInput.value = "";
      renderAdmin();
      renderCatalog(filterProducts());
    } catch (error) {
      console.error("Error adding product:", error.message);
      showNotification("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞.");
    }
  } else {
    showNotification("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è! –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç 1 –¥–æ 5.");
  }
}

function editProduct(index) {
  const product = products[index];
  if (!product) return;
  document.getElementById("editProductIndex").value = index;
  document.getElementById("editProductName").value = product.name;
  document.getElementById("editProductCategory").value = product.category;
  document.getElementById("editProductSizes").value = product.size.join(",");
  document.getElementById("editProductPrice").value = product.price;
  document.getElementById("editProductYear").value = product.year || "";
  document.getElementById("editProductBlank").value = product.blank || "";
  document.getElementById("editProductCondition").value = product.condition;
  document.getElementById("adminContent").style.display = "none";
  document.getElementById("editProductForm").style.display = "block";
}

async function updateProduct() {
  const index = Number(document.getElementById("editProductIndex")?.value);
  const product = products[index];
  if (!product) return;
  const name = document.getElementById("editProductName")?.value;
  const category = document.getElementById("editProductCategory")?.value;
  const sizesInput = document
    .getElementById("editProductSizes")
    ?.value.split(",")
    .map((s) => s.trim())
    .filter((s) => s);
  const price = Number(document.getElementById("editProductPrice")?.value);
  const year = document.getElementById("editProductYear")?.value;
  const blank = document.getElementById("editProductBlank")?.value;
  const condition = Number(
    document.getElementById("editProductCondition")?.value
  );
  const imageInput = document.getElementById("editProductImage");
  if (
    name &&
    category &&
    !isNaN(price) &&
    !isNaN(condition) &&
    condition >= 1 &&
    condition <= 5
  ) {
    const formData = new FormData();
    formData.append("name", name);
    formData.append("size", sizesInput.join(","));
    formData.append("price", price);
    formData.append("category", category);
    formData.append("condition", condition);
    if (year) formData.append("year", year);
    if (blank) formData.append("blank", blank);
    for (let i = 0; i < imageInput.files.length; i++) {
      formData.append("images", imageInput.files[i]);
    }
    try {
      const response = await axios.put(
        `https://shroud.onrender.com/api/products/${product._id}`,
        formData,
        { headers: { "Content-Type": "multipart/form-data" } }
      );
      products[index] = response.data;
      showNotification("–¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª—ë–Ω!");
      cancelEditProduct();
      renderAdmin();
      renderCatalog(filterProducts());
    } catch (error) {
      console.error("Error updating product:", error.message);
      showNotification("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞.");
    }
  } else {
    showNotification("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è! –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç 1 –¥–æ 5.");
  }
}

function cancelEditProduct() {
  document.getElementById("adminContent").style.display = "block";
  document.getElementById("editProductForm").style.display = "none";
}

async function deleteProduct(index) {
  const product = products[index];
  if (!product) return;
  try {
    await axios.delete(
      `https://shroud.onrender.com/api/products/${product._id}`
    );
    products.splice(index, 1);
    renderAdmin();
    renderCatalog(filterProducts());
    showNotification("–¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω!");
  } catch (error) {
    console.error("Error deleting product:", error.message);
    showNotification("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞.");
  }
}

async function deleteReview(index) {
  try {
    await axios.delete(
      `https://shroud.onrender.com/api/reviews/${reviews[index]._id}`
    );
    reviews.splice(index, 1);
    renderReviews();
    showNotification("–û—Ç–∑—ã–≤ —É–¥–∞–ª—ë–Ω!");
  } catch (error) {
    console.error("Error deleting review:", error.message);
    showNotification("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞.");
  }
}

function showScreen(screenId) {
  document.querySelectorAll(".screen").forEach((screen) => {
    screen.classList.remove("active");
  });
  const targetScreen = document.getElementById(screenId);
  if (targetScreen) {
    targetScreen.classList.add("active");
    if (screenId === "catalogScreen") {
      renderCatalog(filterProducts());
    } else if (screenId === "cartScreen") {
      renderCart();
    } else if (screenId === "reviewsScreen") {
      renderReviews();
    }
  }
}

const searchInput = document.getElementById("searchInput");
if (searchInput) {
  searchInput.addEventListener("input", () => {
    renderCatalog(filterProducts());
  });
}

checkIfAdminUser();
renderBottomNav();
loadData();
