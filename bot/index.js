const { Telegraf } = require("telegraf");
const LocalSession = require("telegraf-session-local"); // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç
const axios = require("axios");
require("dotenv").config({ path: "../.env" });

const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);
bot.use(new LocalSession().middleware()); // –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–µ—Å—Å–∏–∏

// –§–ª–∞–≥–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
let isWaitingForReview = false;
let isWaitingForPhoto = false;
let isWaitingForText = false;
let fileUrl = ""; // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è URL —Ñ–æ—Ç–æ

// –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
const paymentDetails = {
  phone: "+79994684757", // –¢–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  recipientName: "–°—Ç–µ–ø–∞–Ω –†.", // –¢–≤–æ—ë –∏–º—è
  bank: "–í–¢–ë", // –ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞
};

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.start((ctx) => {
  ctx.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω –º–µ—Ä—á–∞! üòé", {
    reply_markup: {
      inline_keyboard: [
        [{ text: "–û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω üõí", callback_data: "open_shop" }],
        [{ text: "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ ‚≠ê", callback_data: "leave_review" }],
        [{ text: "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É üì¨", callback_data: "subscribe" }],
        [{ text: "–°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É üìù", callback_data: "create_form" }],
        [{ text: "–ù–∞—à –∫–∞–Ω–∞–ª üì¢", callback_data: "visit_channel" }],
      ],
      remove_keyboard: true,
    },
  });
});

// –û—Ç–∫—Ä—ã—Ç–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞
bot.action("open_shop", (ctx) => {
  ctx.answerCbQuery();
  ctx.reply("–ú–∞–≥–∞–∑–∏–Ω:", {
    reply_markup: {
      inline_keyboard: [
        [
          {
            text: "–ó–∞–ø—É—Å—Ç–∏—Ç—å WebApp",
            web_app: { url: "https://shroud.onrender.com/" },
          },
        ],
      ],
    },
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∑—ã–≤–∞
bot.action("leave_review", (ctx) => {
  ctx.answerCbQuery();
  ctx.reply("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤:", {
    reply_markup: {
      force_reply: true,
    },
  });
  isWaitingForReview = true;
});

// –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É
bot.action("subscribe", async (ctx) => {
  ctx.answerCbQuery();
  const subscriber = { userId: ctx.from.id };
  try {
    await axios.post("https://shroud.onrender.com/api/subscribers", subscriber);
    ctx.reply("–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É!");
  } catch (error) {
    ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    console.error(error);
  }
});

// –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã
bot.action("create_form", (ctx) => {
  ctx.answerCbQuery();
  ctx.reply("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞:", {
    reply_markup: {
      force_reply: true,
    },
  });
  isWaitingForPhoto = true;
});

// –ü–æ—Å–µ—â–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
bot.action("visit_channel", (ctx) => {
  ctx.answerCbQuery();
  ctx.reply("–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É –∫–∞–Ω–∞–ª—É: @shroudshirt");
});

// –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on("message", async (msgCtx) => {
  if (isWaitingForReview && msgCtx.message.text) {
    const review = {
      username: msgCtx.from.username || msgCtx.from.first_name || "–ê–Ω–æ–Ω–∏–º",
      text: msgCtx.message.text,
      approved: false,
    };
    try {
      await axios.post("https://shroud.onrender.com/api/reviews", review);
      await msgCtx.reply("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –û–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.");
      await bot.telegram.sendMessage(
        process.env.ADMIN_CHAT_ID,
        `–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç @${review.username}: ${review.text}\n–î–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.`
      );
    } catch (error) {
      msgCtx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
      console.error(error);
    }
    isWaitingForReview = false;
  } else if (isWaitingForPhoto && msgCtx.message.photo) {
    const photo = msgCtx.message.photo.pop().file_id;
    fileUrl = await bot.telegram.getFileLink(photo);
    msgCtx.reply(
      "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, —Ä–∞–∑–º–µ—Ä, —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –§—É—Ç–±–æ–ª–∫–∞, M, –ù–æ–≤–æ–µ, –û–¥–µ–∂–¥–∞):",
      {
        reply_markup: {
          force_reply: true,
        },
      }
    );
    isWaitingForPhoto = false;
    isWaitingForText = true;
  } else if (isWaitingForText && msgCtx.message.text) {
    const [name, size, condition, category] = msgCtx.message.text
      .split(",")
      .map((s) => s.trim());
    const form = {
      photo: fileUrl,
      name,
      size,
      condition,
      category,
      userId: msgCtx.from.id,
      approved: false,
    };
    try {
      await axios.post("https://shroud.onrender.com/api/forms", form);
      await msgCtx.reply("–ê–Ω–∫–µ—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ!");
      await bot.telegram.sendMessage(
        process.env.ADMIN_CHAT_ID,
        `–ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞ –æ—Ç @${
          msgCtx.from.username || msgCtx.from.first_name || "–ê–Ω–æ–Ω–∏–º"
        }:\n–ù–∞–∑–≤–∞–Ω–∏–µ: ${name}\n–†–∞–∑–º–µ—Ä: ${size}\n–°–æ—Å—Ç–æ—è–Ω–∏–µ: ${condition}\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${category}\n–§–æ—Ç–æ: ${fileUrl}`
      );
    } catch (error) {
      msgCtx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–Ω–∫–µ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
      console.error(error);
    }
    isWaitingForText = false;
    fileUrl = ""; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º fileUrl
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –æ–ø–ª–∞—Ç—ã
bot.on("web_app_data", async (ctx) => {
  console.log("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ web_app_data:", ctx.update); // –õ–æ–≥ –≤—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏—è
  try {
    if (!ctx.webAppData || !ctx.webAppData.data) {
      console.error(
        "ctx.webAppData –∏–ª–∏ ctx.webAppData.data –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç:",
        ctx.webAppData
      );
      await ctx.reply("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ—Ç WebApp –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã.");
      return;
    }

    const data = JSON.parse(ctx.webAppData.data);
    console.log("–î–∞–Ω–Ω—ã–µ –æ—Ç WebApp:", data); // –õ–æ–≥ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö

    if (data.action === "request_payment") {
      const total = data.total;
      const userId = data.userId;
      const deliveryData = data.deliveryData;

      console.log("–û–±—Ä–∞–±–æ—Ç–∫–∞ request_payment:", {
        total,
        userId,
        deliveryData,
      }); // –õ–æ–≥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π

      const message = `–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ ${total} —Ä—É–±–ª–µ–π –Ω–∞ –Ω–æ–º–µ—Ä: ${paymentDetails.phone}. –ò–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è: ${paymentDetails.recipientName}. –ë–∞–Ω–∫: ${paymentDetails.bank}.`;

      await ctx.reply(message, {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: "–Ø –æ–ø–ª–∞—Ç–∏–ª",
                callback_data: `confirm_payment:${userId}:${total}`,
              },
            ],
          ],
        },
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
      ctx.session[userId] = { total, deliveryData };
      console.log("–î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Å–µ—Å—Å–∏–∏:", ctx.session[userId]);
    } else {
      console.log("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", data.action);
      await ctx.reply("–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç WebApp.");
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ web_app_data:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
bot.action(/confirm_payment:(\d+):(\d+)/, async (ctx) => {
  ctx.answerCbQuery();
  const userId = ctx.match[1];
  const total = ctx.match[2];

  if (ctx.session && ctx.session[userId]) {
    await ctx.reply("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –°–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.");
    delete ctx.session[userId]; // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
  } else {
    await ctx.reply("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –æ –Ω–æ–≤–æ–º —Ç–æ–≤–∞—Ä–µ
async function notifySubscribers(product) {
  try {
    const response = await axios.get(
      "https://shroud.onrender.com/api/subscribers"
    );
    const subscribers = response.data;
    for (const subscriber of subscribers) {
      await bot.telegram.sendMessage(
        subscriber.userId,
        `–ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä –≤ –º–∞–≥–∞–∑–∏–Ω–µ: ${product.name} (${product.category}) –∑–∞ ${product.price}‚ÇΩ!`
      );
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:", error);
  }
}

bot.launch();
console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!");

module.exports = { notifySubscribers };
