const { Telegraf } = require("telegraf");
const axios = require("axios");
const FormData = require("form-data");
require("dotenv").config();

const paymentDetails = {
  phone: "+79994684757",
  recipientName: "–°—Ç–µ–ø–∞–Ω –†",
  bank: "–í–¢–ë",
};

const pendingOrders = {};
const userStates = {};

let bot;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
const isBotRunning = () => {
  const lockFile = ".bot-lock";
  const fs = require("fs");
  if (fs.existsSync(lockFile)) {
    return true;
  }
  fs.writeFileSync(lockFile, process.pid.toString());
  return false;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
const cleanup = () => {
  const lockFile = ".bot-lock";
  const fs = require("fs");
  if (fs.existsSync(lockFile)) {
    fs.unlinkSync(lockFile);
  }
};

process.on("exit", cleanup);
process.on("SIGINT", cleanup);
process.on("SIGTERM", cleanup);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
function startBot() {
  if (isBotRunning()) {
    console.log("–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω –¥—Ä—É–≥–∏–º —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ.");
    process.exit(1);
  }

  bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);

  // –ö–æ–º–∞–Ω–¥–∞ /start
  bot.start((ctx) => {
    ctx.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω –º–µ—Ä—á–∞! üòé", {
      reply_markup: {
        inline_keyboard: [
          [{ text: "–û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω üõí", callback_data: "open_shop" }],
          [{ text: "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ ‚≠ê", callback_data: "leave_review" }],
          [{ text: "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É üì¨", callback_data: "subscribe" }],
          [{ text: "–°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É üìù", callback_data: "create_form" }],
          [{ text: "–ù–∞—à –∫–∞–Ω–∞–ª üì¢", callback_data: "visit_channel" }],
        ],
        remove_keyboard: true,
      },
    });
  });

  // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞
  bot.action("open_shop", (ctx) => {
    ctx.answerCbQuery();
    ctx.reply("–ú–∞–≥–∞–∑–∏–Ω:", {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: "–ó–∞–ø—É—Å—Ç–∏—Ç—å WebApp",
              web_app: { url: "https://shroud.onrender.com/" },
            },
          ],
        ],
      },
    });
  });

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É
  bot.action("subscribe", async (ctx) => {
    ctx.answerCbQuery();
    const subscriber = { userId: ctx.from.id };
    try {
      await axios.post("https://shroud.onrender.com/api/subscribers", subscriber);
      ctx.reply("–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É!");
    } catch (error) {
      ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
      console.error(error);
    }
  });

  // –ü–æ—Å–µ—â–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
  bot.action("visit_channel", (ctx) => {
    ctx.answerCbQuery();
    ctx.reply("–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É –∫–∞–Ω–∞–ª—É: @shroudshirt");
  });

  // –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤
  bot.action("leave_review", (ctx) => {
    ctx.answerCbQuery();
    userStates[ctx.from.id] = { state: "waiting_for_review" };
    ctx.reply("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤:", {
      reply_markup: {
        force_reply: true,
      },
    });
  });

  // –°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É
  bot.action("create_form", (ctx) => {
    ctx.answerCbQuery();
    userStates[ctx.from.id] = { state: "waiting_for_photo" };
    ctx.reply("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞:", {
      reply_markup: {
        force_reply: true,
      },
    });
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç WebApp
  bot.on("web_app_data", async (ctx) => {
    try {
      const data = JSON.parse(ctx.message.web_app_data.data);
      console.log("–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ WebApp:", data);

      if (data.action === "requestPayment") {
        const total = data.total;
        const delivery = data.delivery || {};
        const items = data.items || [];
        const userId = ctx.from.id;

        pendingOrders[userId] = { total, delivery, items };
        console.log("–°–æ—Ö—Ä–∞–Ω—ë–Ω –∑–∞–∫–∞–∑ –¥–ª—è userId:", userId, pendingOrders[userId]);

        const message = `–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ ${total} —Ä—É–±–ª–µ–π –Ω–∞ –Ω–æ–º–µ—Ä: ${paymentDetails.phone}.\n–ò–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è: ${paymentDetails.recipientName}.\n–ë–∞–Ω–∫: ${paymentDetails.bank}.`;
        const callbackData = `payment_confirmed_${userId}`;

        await ctx.reply(message, {
          reply_markup: {
            inline_keyboard: [
              [{ text: "–Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data: callbackData }],
            ],
          },
        });
      } else {
        ctx.reply("–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ WebApp, –Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ.");
      }
    } catch (e) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ WebApp:", e);
      ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö.");
    }
  });

  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã
  bot.action(/payment_confirmed_(\d+)/, async (ctx) => {
    ctx.answerCbQuery();
    const userId = ctx.match[1];
    const order = pendingOrders[userId];

    if (!order) {
      console.log("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è userId:", userId);
      await ctx.reply("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
      return;
    }

    const itemsList =
      order.items.length > 0
        ? order.items
            .map((item) => `- ${item.name} (${item.size}) - ${item.price}‚ÇΩ`)
            .join("\n")
        : "–¢–æ–≤–∞—Ä—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã";

    const username = ctx.from.username || ctx.from.first_name || "–ê–Ω–æ–Ω–∏–º";
    const message = `–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${username} (ID: ${userId})\n–°—É–º–º–∞: ${
      order.total
    } —Ä—É–±–ª–µ–π\n–î–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∞–≤–∫–∏:\n- –ò–º—è: ${
      order.delivery.name || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    }\n- –ê–¥—Ä–µ—Å: ${order.delivery.address || "–ù–µ —É–∫–∞–∑–∞–Ω"}\n- –¢–µ–ª–µ—Ñ–æ–Ω: ${
      order.delivery.phone || "–ù–µ —É–∫–∞–∑–∞–Ω"
    }\n–¢–æ–≤–∞—Ä—ã:\n${itemsList}`;

    await bot.telegram.sendMessage(process.env.ADMIN_CHAT_ID, message);
    delete pendingOrders[userId];
    await ctx.reply("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –°–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.");
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  bot.on("text", async (ctx) => {
    const userId = ctx.from.id;
    const state = userStates[userId]?.state;

    if (state === "waiting_for_review") {
      const review = {
        username: ctx.from.username || ctx.from.first_name || "–ê–Ω–æ–Ω–∏–º",
        text: ctx.message.text,
        approved: false,
      };
      try {
        await axios.post("https://shroud.onrender.com/api/reviews", review);
        await ctx.reply("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –û–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.");
        await bot.telegram.sendMessage(
          process.env.ADMIN_CHAT_ID,
          `–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç @${review.username}: ${review.text}\n–î–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.`
        );
      } catch (error) {
        ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        console.error(error);
      }
      delete userStates[userId];
    } else if (state === "waiting_for_form_text") {
      const [name, size, condition, category] = ctx.message.text
        .split(",")
        .map((s) => s.trim());
      const form = {
        photo: [userStates[userId].fileUrl],
        name,
        size,
        condition,
        category,
        userId: ctx.from.id,
        approved: false,
      };
      try {
        await axios.post("https://shroud.onrender.com/api/forms", form);
        await ctx.reply("–ê–Ω–∫–µ—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ!");
        await bot.telegram.sendMessage(
          process.env.ADMIN_CHAT_ID,
          `–ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞ –æ—Ç @${
            ctx.from.username || ctx.from.first_name || "–ê–Ω–æ–Ω–∏–º"
          }:\n–ù–∞–∑–≤–∞–Ω–∏–µ: ${name}\n–†–∞–∑–º–µ—Ä: ${size}\n–°–æ—Å—Ç–æ—è–Ω–∏–µ: ${condition}\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${category}\n–§–æ—Ç–æ: https://shroud.onrender.com${
            userStates[userId].fileUrl
          }`
        );
      } catch (error) {
        ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–Ω–∫–µ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        console.error(error);
      }
      delete userStates[userId];
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
  bot.on("photo", async (ctx) => {
    const userId = ctx.from.id;
    const state = userStates[userId]?.state;

    if (state === "waiting_for_photo") {
      const photo = ctx.message.photo.pop().file_id;
      let fileUrl;
      try {
        fileUrl = await bot.telegram.getFileLink(photo);
        const response = await axios.get(fileUrl, { responseType: "stream" });
        const formData = new FormData();
        formData.append("photo", response.data, "photo.jpg");

        const uploadResponse = await axios.post(
          "https://shroud.onrender.com/api/upload",
          formData,
          { headers: formData.getHeaders() }
        );
        fileUrl = uploadResponse.data.url;

        userStates[userId] = { state: "waiting_for_form_text", fileUrl };
        ctx.reply(
          "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, —Ä–∞–∑–º–µ—Ä, —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –§—É—Ç–±–æ–ª–∫–∞, M, –ù–æ–≤–æ–µ, –û–¥–µ–∂–¥–∞):",
          { reply_markup: { force_reply: true } }
        );
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:", error);
        ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
        delete userStates[userId];
      }
    }
  });

  bot.launch();
  console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!");
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
async function notifySubscribers(product) {
  if (!bot) {
    console.log("–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.");
    return;
  }
  try {
    const response = await axios.get("https://shroud.onrender.com/api/subscribers");
    const subscribers = response.data;
    for (const subscriber of subscribers) {
      await bot.telegram.sendMessage(
        subscriber.userId,
        `–ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä –≤ –º–∞–≥–∞–∑–∏–Ω–µ: ${product.name} (${product.category}) –∑–∞ ${product.price}‚ÇΩ!`
      );
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:", error);
  }
}

module.exports = { startBot, notifySubscribers };
